---

- name: Including distro-specific variables
  include_vars: "vars_{{ ansible_distribution }}.yml"
  
- name: "Setting things up for {{ ansible_distribution }}"
  include: "setup_{{ ansible_distribution }}.yml"
  when: ansible_distribution in [ 'Ubuntu', 'Gentoo' ]

- name: "Ensure /etc/ssh/config.d is present"
  file:
    path: "/etc/ssh/config.d"
    state: directory

- name: Ensure Openssh client is configured right.
  template:
    src: ssh_config.j2
    dest: "{{ ssh_config_path }}"

- name: Ensure Openssh daemon is configured right.
  lineinfile:
    dest: "{{ sshd_config_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication {{ sshd_config.password_authentication }}"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin {{ sshd_config.permit_root_login }}"
    - regexp: "^Port"
      line: "Port {{ sshd_config.port }}"
    - regexp: "^UseDNS"
      line: "UseDNS {{ sshd_config.usedns }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords {{ sshd_config.permit_empty_password }}"
    - regexp: "^ChallengeResponseAuthentication"
      line: "ChallengeResponseAuthentication {{ sshd_config.challenge_response_auth }}"
    - regexp: "^GSSAPIAuthentication"
      line: "GSSAPIAuthentication {{ sshd_config.gss_api_authentication }}"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding {{ sshd_config.x11_forwarding }}"
    - regexp: "^AuthenticationMethods"
      line: "AuthenticationMethods {{ sshd_config.authentication_methods }}"
    - regexp: "^ClientAliveInterval"
      line: "ClientAliveInterval {{ sshd_config.client_alive_interval }}"
    - regexp: "^ClientAliveCountMax"
      line: "ClientAliveCountMax {{ sshd_config.client_alive_count_max }}"
  notify: restart ssh

- name: Ensure correct state of additional groups (sftponly enabled).
  group:
    name: "{{ sshd_sftponly_group }}"
    state: "{{ 'present' if sshd_sftponly_enabled else 'absent' }}"
  when: sshd_sftponly_enabled

- name: Ensure correct state of additional groups (sftponly disabled).
  group:
    name: "{{ sshd_sftponly_group }}"
    state: "{{ 'present' if sshd_sftponly_enabled else 'absent' }}"
  ignore_errors: yes # required here, otherwise this may fail if users exist who re in the group which is to be deleted
  when: not sshd_sftponly_enabled


- name: Ensure sftp restrictions apply.
  blockinfile:
    dest: "{{ sshd_config_path }}"
    state: "{{ 'present' if sshd_sftponly_enabled else 'absent' }}"
    block: |
      Match Group {{ sshd_sftponly_group }}
          ForceCommand internal-sftp
          ChrootDirectory %h
          AllowAgentForwarding no
          AllowTcpForwarding no
          PermitTunnel no
          X11Forwarding no
  notify: restart ssh


- name: "Ensuring that the sshd service is started and enabled"
  service:
    name: "{{ sshd_svcname }}"
    state: "{{ sshd_state }}"
    enabled: "{{ sshd_enabled }}"
